name: Build Fluent Bit Plugins on Push

on:
  push:
    branches:
      - windows-plugin-generation

jobs:
  build-plugins:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go (for Windows builds)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build Plugins
        run: |
          echo "Building on OS: ${{ runner.os }}"
          
          mkdir -p plugins
          
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "Building .so plugins using Docker..."
            docker build -t lm-logs-fluentbit .
            docker run --rm -v "$PWD:/build" lm-logs-fluentbit \
              bash -c "mkdir -p /build/plugins && cp -r /go/src/lm/build/*.so /build/plugins/ || echo 'No .so plugins found'"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Building .dll plugins using Go..."
            if [ -f "out_lm.go" ]; then
              go build -buildmode=c-shared -o plugins/out_lm-windows.dll out_lm.go || echo "Failed to build .dll plugin"
            else
              echo "Go plugin source not found: out_lm.go"
            fi
          fi
        shell: bash

      - name: List generated files
        run: ls -R plugins || echo "No plugins directory found"
        shell: bash

      - name: Upload plugin artifacts (.so and .dll)
        uses: actions/upload-artifact@v4
        with:
          name: fluent-bit-plugins-${{ matrix.os }}
          path: |
            plugins/**/*.so
            plugins/**/*.dll

      - name: Commit and Push Generated Plugins
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo "Searching for plugins to commit..."
          FILES=$(find plugins -type f \( -name '*.so' -o -name '*.dll' \) || true)
          
          if [ -n "$FILES" ]; then
            git config user.name "GitHub Actions Bot"
            git config user.email "actions@github.com"
            git stash
          
            git pull --rebase origin ${{ github.ref_name }} || true
            git stash pop || true
          
            git add -f $FILES
            gi
